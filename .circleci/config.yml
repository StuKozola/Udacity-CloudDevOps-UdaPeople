version: 2.1

orbs:
  slack: circleci/slack@4.1.1
  aws-cli: circleci/aws-cli@1.3.0

parameters:
  memstash-token:
    type: string
    default: "3ffae65a-7ef5-43ba-be64-8cb88a18dd11"

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID. 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm --recursive s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.   
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            export SUCCESS=$(curl -H "token: << pipeline.parameters.memstash-token >>" \
              --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

  get-commit-message:
    description: Get commit message for slack posts
    steps:
      - run:
          name: Add commit message to env
          when: always
          command: |
            echo "export COMMIT_MESSAGE=\"$(git log --format=%B -n 1 $CIRCLE_SHA1)\"" > $BASH_ENV
            source $BASH_ENV
  
  set-db-environment:
    description: Set backend db environment variables
    steps:
      - run:
          name: Setting database environment variables
          when: always
          command: |
            echo ANSIBLE_HOST_KEY_CHECKING=False > "backend/.env"
            echo ENVIRONMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env

  slack-fail-notify:
    description: Send failure notification to slack
    steps:
      - get-commit-message
      - slack/notify:
          channel: C01L195LB4N
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": ":octagonal_sign: Job Failed! :octagonal_sign:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "Failure in *$CIRCLE_JOB* of *$CIRCLE_PROJECT_REPONAME ($CIRCLE_BRANCH)*\nCommit by $CIRCLE_USERNAME: $COMMIT_MESSAGE"
                    }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }
            
  slack-pass-notify:
    description: Send pass notification to slack
    steps:
      - get-commit-message
      - slack/notify:
          channel: C01L195LB4N
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": ":white_check_mark: Job Passed! :white_check_mark:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "Success in *$CIRCLE_JOB* of *$CIRCLE_PROJECT_REPONAME ($CIRCLE_BRANCH)*\nCommit by $CIRCLE_USERNAME: $COMMIT_MESSAGE"
                    }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            sudo npm install
            sudo npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack-fail-notify

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             sudo npm install
             sudo npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - save_cache:
          paths: [backend/dist]
          key: backend-dist
      - slack-fail-notify

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build] 
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install oauth-sign 
            npm run test
      - slack-fail-notify

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm run test
      - slack-fail-notify
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Secuirty scan of front-end
          command: |
            cd frontend
            npm audit --audit-level=critical
      - slack-fail-notify

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Secuirty scan of back-end
          command: |
            cd backend
            npm audit --audit-level=critical
      - slack-fail-notify

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install prerequsites
          command: |
            yum -y install tar gzip jq git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_URL=`aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].[PublicDnsName]" \
              --output text | tr -d '\n'`
            echo $BACKEND_URL >> .circleci/ansible/inventory.txt
            
            cat .circleci/ansible/inventory.txt
            # put it in the shared memory
            curl -H "Content-Type: text/plain" \
              -H "token: << pipeline.parameters.memstash-token >>" \
              --request PUT \
              --data "$BACKEND_URL" https://api.memstash.io/values/BACKEND_URL_${CIRCLE_WORKFLOW_ID:0:7}
            echo $BACKEND_URL
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - slack-fail-notify
      - destroy-environment   

  configure-infrastructure:
    docker:
      - image: willhallonline/ansible:2.10-ubuntu-18.04
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["64:f5:b4:02:5b:76:87:e8:4c:fc:f6:0b:df:87:44:9b"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apt -y update
            apt -y install jq tar gzip git curl
      - set-db-environment
      - run:
          name: Configure server
          environment: 
            ANSIBLE_HOST_KEY_CHECKING: False
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook configure-server.yml --inventory-file=inventory.txt
      - run:
          name: Install prometheus node exporter
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook configure-prometheus.yml --inventory-file=inventory.txt
      - slack-fail-notify
      - run:
          name: Install AWS CLI for rollback
          when: on_fail
          command: |
            pip3 install --upgrade pip && pip3 install awscli
      - destroy-environment  

  run-migrations:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - set-db-environment
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_12.x | bash -
            yum -y install nodejs npm tar gzip jq git
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > /tmp/migrations.log
            cat /tmp/migrations.log

            RESULT=0
            if (cat /tmp/migrations.log | grep -c "has been executed successfully")
            then 
              RESULT=1 
            fi
            echo "RESULT: ${RESULT}"
            curl -H "Content-Type: text/plain" \
               -H "token: << pipeline.parameters.memstash-token >>" \
               --request PUT --data "${RESULT}" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
      - slack-fail-notify
      - revert-migrations
      - destroy-environment      

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_12.x | bash -
            yum -y install nodejs npm tar gzip jq git
      - run:
          name: Get backend url
          command: |
            BACKEND_URL=`curl -H \
              "token: << pipeline.parameters.memstash-token >>" \
              --request GET https://api.memstash.io/values/BACKEND_URL_${CIRCLE_WORKFLOW_ID:0:7}`
            export API_URL="http://${BACKEND_URL}:3030"
            echo "${API_URL}"
      - run:
          name: Build frontend
          command: |            
            cd frontend
            npm install

            BACKEND_URL=`curl -H "token: << pipeline.parameters.memstash-token >>" \
              --request GET https://api.memstash.io/values/BACKEND_URL_${CIRCLE_WORKFLOW_ID:0:7}`
            export API_URL="http://${BACKEND_URL}:3030"
            export NODE_ENV=production

            echo ENVIRONMENT=production > ".env"
            echo NODE_ENV=$NODE_ENV >> ".env"
            echo API_URL=$API_URL >>".env"

            npm run build:prod
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            cp .env ./dist/
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - run:
          name: Save S3 bucket url
          command: |
            LOCATION=`aws s3api get-bucket-location --bucket udapeople-${CIRCLE_WORKFLOW_ID:0:7} --output text | tr -d '\n'`
            S3_URL="udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-${LOCATION}.amazonaws.com/index.html"
            echo $S3_URL
            curl -H "Content-Type: text/plain" -H "token: << pipeline.parameters.memstash-token >>" \
              --request PUT --data "$S3_URL" \
            https://api.memstash.io/values/S3_URL_${CIRCLE_WORKFLOW_ID:0:7}
      - slack-fail-notify
      - revert-migrations
      - destroy-environment    
                    
  deploy-backend:
    docker:
      - image: willhallonline/ansible:2.10-ubuntu-18.04
    steps:
      - checkout
      - set-db-environment
      - add_ssh_keys:
          fingerprints: ["64:f5:b4:02:5b:76:87:e8:4c:fc:f6:0b:df:87:44:9b"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apt -y update
            apt -y install jq tar gzip git curl
            curl -sL https://deb.nodesource.com/setup_12.x | bash -
            apt -y install nodejs
      - restore_cache:
          keys: ["backend-dist"]
      - run:
          name: Package backend
          command: |
            cd /home
            tar -czf backend.tar.gz -P /home/circleci/project/backend/dist
      - run:
          name: Deploy backend
          command: |
            cd ~/project/.circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook deploy-backend.yml --inventory-file=inventory.txt
      - run:
          name: Install AWS CLI for rollback
          when: on_fail
          command: |
            pip3 install --upgrade pip && pip3 install awscli
      - slack-fail-notify
      - revert-migrations
      - destroy-environment   

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl jq
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_URL=$(sed -n 2p .circleci/ansible/inventory.txt)
      - run:
          name: Backend smoke test.
          command: |
            echo $BACKEND_URL
            if curl -s http://${BACKEND_URL}:3030/api/status 
            then
              return 1
            else
              return 0
            fi
      - run:
          name: Frontend smoke test.
          command: |
            S3_URL=`curl -H "token: << pipeline.parameters.memstash-token >>" \
              --request GET https://api.memstash.io/values/S3_URL_${CIRCLE_WORKFLOW_ID:0:7}`
            echo $S3_URL

            if curl -s ${URL} | grep "Welcome" 
            then
              return 1
            else
              return 0
            fi
      - run:
          name: Install AWS CLI for rollback
          when: on_fail
          command: |
            pip3 install --upgrade pip && pip3 install awscli
      - slack-fail-notify
      - revert-migrations
      - destroy-environment  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install jq tar gzip git curl
      - run:
          name: Save old workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
                          list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                          --no-paginate --output text)
            echo "OldWorkflowID: ${OldWorkflowID}"
            curl -H "Content-Type: text/plain" -H "token: << pipeline.parameters.memstash-token >>" \
                        --request PUT --data "${OldWorkflowID}" \
                        https://api.memstash.io/values/old_workflow_id_${CIRCLE_WORKFLOW_ID:0:7}
            echo `curl -H "token: << pipeline.parameters.memstash-token >>" \
              --request GET https://api.memstash.io/values/old_workflow_id_${CIRCLE_WORKFLOW_ID:0:7}`
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udapeople \
              --stack-name "udapeople-cloudfront" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
      - slack-fail-notify
      - revert-migrations
      - destroy-environment  

  cleanup:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(curl -H "token: << pipeline.parameters.memstash-token >>" \
              --request GET https://api.memstash.io/values/old_workflow_id_${CIRCLE_WORKFLOW_ID:0:7})
            echo "OldWorkflowID: ${OldWorkflowID}"

            export STACKS=export STACKS=$(aws cloudformation list-stacks \
              --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text | tr -d '\n')
            echo "STACKS:\n ${STACKS}"
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "Deleting${OldWorkflowID}"
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name backend-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name frontend-${OldWorkflowID}
            fi
      - slack-fail-notify

workflows:
  default:
    jobs:
      - build-frontend:
          context: UDAPEOPLE
      - build-backend:
          context: UDAPEOPLE
      - test-frontend:
          context: UDAPEOPLE
          requires: [build-frontend]
      - test-backend:
          context: UDAPEOPLE
          requires: [build-backend]
      - scan-backend:
          context: UDAPEOPLE
          requires: [build-backend]
      - scan-frontend:
          context: UDAPEOPLE
          requires: [build-frontend]
      - deploy-infrastructure:
          context: UDAPEOPLE
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          context: UDAPEOPLE
          requires: [deploy-infrastructure]
      - run-migrations:
          context: UDAPEOPLE
          requires: [configure-infrastructure]
      - deploy-frontend:
          context: UDAPEOPLE
          requires: [run-migrations]
      - deploy-backend:
          context: UDAPEOPLE
          requires: [run-migrations]
      - smoke-test:
          context: UDAPEOPLE
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          context: UDAPEOPLE
          requires: [smoke-test]
      - cleanup:
          context: UDAPEOPLE
          requires: [cloudfront-update]